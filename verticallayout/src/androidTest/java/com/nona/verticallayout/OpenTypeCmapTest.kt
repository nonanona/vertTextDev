package com.nona.verticallayout

import android.graphics.fonts.Font
import android.util.Log
import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.nona.verticallayout.graphics.OpenTypeUtils
import com.nona.verticallayout.utils.HtmlUtil

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*
import javax.microedition.khronos.opengles.GL
import kotlin.math.max
import kotlin.math.min
import kotlin.streams.toList

@RunWith(AndroidJUnit4::class)
class OpenTypeCmapTest {
    private companion object {
        val CODE_POINTS = intArrayOf(
            0x000a,0x2015,0x3000,0x3001,0x3002,0x3005,0x300c,0x300d,
            0x3042,0x3044,0x3046,0x3048,0x304a,0x304b,0x304c,0x304d,
            0x304e,0x304f,0x3050,0x3051,0x3052,0x3053,0x3054,0x3055,
            0x3056,0x3057,0x3058,0x3059,0x305a,0x305b,0x305c,0x305d,
            0x305f,0x3060,0x3061,0x3063,0x3064,0x3065,0x3066,0x3067,
            0x3068,0x3069,0x306a,0x306b,0x306c,0x306d,0x306e,0x306f,
            0x3070,0x3071,0x3072,0x3073,0x3074,0x3075,0x3076,0x3077,
            0x3078,0x3079,0x307a,0x307b,0x307d,0x307e,0x307f,0x3080,
            0x3081,0x3082,0x3083,0x3084,0x3086,0x3087,0x3088,0x3089,
            0x308a,0x308b,0x308c,0x308d,0x308f,0x3092,0x3093,0x30a1,
            0x30a2,0x30a4,0x30aa,0x30ab,0x30b5,0x30b8,0x30b9,0x30bc,
            0x30bf,0x30c3,0x30c7,0x30c8,0x30c9,0x30cb,0x30d5,0x30d6,
            0x30da,0x30de,0x30e3,0x30e4,0x30ea,0x30eb,0x30ec,0x30ef,
            0x30f3,0x30f4,0x30fb,0x30fc,0x4e00,0x4e08,0x4e09,0x4e0a,
            0x4e0b,0x4e0d,0x4e16,0x4e21,0x4e26,0x4e2d,0x4e38,0x4e3b,
            0x4e57,0x4e71,0x4e88,0x4e8b,0x4e8c,0x4e91,0x4e94,0x4ea4,
            0x4ead,0x4eba,0x4eca,0x4ed5,0x4ed6,0x4ed8,0x4ee3,0x4ee5,
            0x4ef6,0x4efb,0x4f1a,0x4f38,0x4f47,0x4f4e,0x4f4f,0x4f53,
            0x4f55,0x4f59,0x4f5c,0x4f8b,0x4f9b,0x4fae,0x4fbf,0x4ff3,
            0x500d,0x5012,0x5019,0x5049,0x5074,0x5078,0x508d,0x50ac,
            0x50cf,0x5100,0x5118,0x5132,0x5143,0x5144,0x5148,0x5149,
            0x5165,0x5168,0x5177,0x5185,0x5186,0x518d,0x5199,0x51b7,
            0x51dd,0x51e6,0x51fa,0x5206,0x5207,0x521d,0x5224,0x5225,
            0x5229,0x5230,0x523a,0x523b,0x524d,0x5272,0x527f,0x529b,
            0x52a0,0x52a9,0x52c7,0x52c9,0x52d5,0x52dd,0x52e2,0x52e4,
            0x5305,0x5316,0x5339,0x5341,0x5348,0x5351,0x539f,0x53bb,
            0x53cb,0x53cc,0x53cd,0x53d6,0x53d7,0x53e3,0x53e5,0x53e9,
            0x53f0,0x5408,0x540c,0x540d,0x5410,0x5411,0x541b,0x5426,
            0x542b,0x5436,0x5438,0x5439,0x543e,0x5448,0x5451,0x5473,
            0x547c,0x54bd,0x554f,0x5584,0x5589,0x558a,0x559d,0x559f,
            0x55b0,0x55c5,0x5606,0x5632,0x5668,0x56db,0x56f0,0x56fd,
            0x5712,0x5730,0x5750,0x576a,0x5782,0x57a3,0x57f7,0x5831,
            0x5834,0x5897,0x58bb,0x58c1,0x58ca,0x58f0,0x58f1,0x5909,
            0x5916,0x591a,0x591c,0x5927,0x5929,0x592a,0x5931,0x5947,
            0x5965,0x596a,0x5973,0x5974,0x597d,0x5999,0x59cb,0x59ff,
            0x5acc,0x5b50,0x5b58,0x5b66,0x5b88,0x5b8c,0x5b97,0x5b9a,
            0x5b9f,0x5ba4,0x5bb3,0x5bb6,0x5bb9,0x5bbf,0x5bd2,0x5bdd,
            0x5bdf,0x5bfe,0x5c04,0x5c0a,0x5c0f,0x5c11,0x5c3b,0x5c41,
            0x5c45,0x5c48,0x5c4b,0x5c64,0x5d29,0x5de6,0x5df1,0x5e2b,
            0x5e2f,0x5e30,0x5e38,0x5e45,0x5e73,0x5e74,0x5e83,0x5e8a,
            0x5e95,0x5ea6,0x5ea7,0x5ead,0x5ed3,0x5efb,0x5f01,0x5f13,
            0x5f15,0x5f1f,0x5f31,0x5f35,0x5f37,0x5f3e,0x5f53,0x5f62,
            0x5f69,0x5f7c,0x5f85,0x5f8c,0x5f97,0x5fa1,0x5fb3,0x5fb4,
            0x5fc3,0x5fc5,0x5fcd,0x5fd8,0x5feb,0x5ff5,0x6012,0x601d,
            0x6025,0x6027,0x6050,0x606f,0x609f,0x60aa,0x60b2,0x60c5,
            0x60dc,0x60f3,0x610f,0x611a,0x611b,0x611f,0x6162,0x6168,
            0x61a4,0x61b6,0x61d0,0x6211,0x6216,0x6226,0x6240,0x624b,
            0x6253,0x6295,0x6298,0x629b,0x62b1,0x62bc,0x62f6,0x6301,
            0x6307,0x6328,0x632b,0x6355,0x6383,0x638c,0x63a0,0x63a5,
            0x63bb,0x63c4,0x63cf,0x63d0,0x63da,0x63f6,0x649a,0x6557,
            0x6559,0x656c,0x6570,0x6577,0x6587,0x658e,0x6591,0x65ad,
            0x65af,0x65b0,0x65b9,0x65cf,0x65e5,0x65e9,0x6602,0x660e,
            0x6613,0x6614,0x661f,0x6625,0x663c,0x6642,0x666f,0x667a,
            0x6696,0x6697,0x66ae,0x66b4,0x66f4,0x66f8,0x6700,0x6708,
            0x6709,0x670d,0x671b,0x671d,0x6728,0x672b,0x672c,0x6749,
            0x6765,0x677f,0x679a,0x679c,0x679d,0x67af,0x67b6,0x67c4,
            0x67d4,0x6804,0x6821,0x6839,0x683c,0x6848,0x6850,0x68a7,
            0x68c4,0x68d2,0x693d,0x696d,0x6975,0x697d,0x69cb,0x69cc,
            0x69d8,0x6a29,0x6a2a,0x6a39,0x6a5f,0x6ac3,0x6b20,0x6b21,
            0x6b63,0x6b69,0x6b7b,0x6b8b,0x6bb5,0x6bcd,0x6bce,0x6bd2,
            0x6bd4,0x6bdb,0x6beb,0x6c17,0x6c34,0x6c38,0x6c60,0x6c7a,
            0x6ce2,0x6ce3,0x6ce5,0x6d12,0x6d3b,0x6d41,0x6d69,0x6d8e,
            0x6d99,0x6de1,0x6e1b,0x6e21,0x6e3e,0x6e80,0x6e8c,0x6e9d,
            0x6ec5,0x6f06,0x6f2b,0x6fc1,0x701f,0x706b,0x7070,0x708e,
            0x70ac,0x70c8,0x7114,0x7121,0x7136,0x7159,0x716e,0x71b1,
            0x71c3,0x71f5,0x722a,0x7247,0x7269,0x72ac,0x731f,0x732b,
            0x7336,0x7363,0x7370,0x7389,0x738b,0x73c0,0x73cd,0x73fe,
            0x7406,0x7425,0x7518,0x751f,0x7523,0x7528,0x7531,0x753b,
            0x755c,0x7560,0x756a,0x7573,0x758b,0x7591,0x75db,0x75de,
            0x7620,0x7656,0x766a,0x767a,0x767d,0x767e,0x7684,0x76ae,
            0x76db,0x76df,0x76ee,0x76f2,0x76f4,0x76f8,0x771f,0x7720,
            0x7738,0x773a,0x773c,0x7740,0x7761,0x7768,0x77e5,0x77ee,
            0x77f3,0x7834,0x788c,0x78e8,0x795e,0x7981,0x79bd,0x7a0b,
            0x7a2e,0x7a3c,0x7a4f,0x7a74,0x7a81,0x7a83,0x7a98,0x7a9f,
            0x7acb,0x7af9,0x7b11,0x7b2c,0x7b39,0x7b46,0x7b49,0x7b4b,
            0x7b54,0x7b86,0x7bc0,0x7c60,0x7c8b,0x7d04,0x7d14,0x7d19,
            0x7d30,0x7d42,0x7d4c,0x7d50,0x7d66,0x7d75,0x7dcf,0x7dda,
            0x7e01,0x7e70,0x7f36,0x7f6e,0x7f75,0x7f8e,0x7fa9,0x7fcc,
            0x7fd2,0x8003,0x8005,0x8033,0x805e,0x8074,0x8077,0x8089,
            0x809d,0x80a5,0x80b2,0x80c3,0x80c6,0x80cc,0x80e1,0x80f8,
            0x8155,0x8179,0x818f,0x819a,0x819d,0x81cd,0x81d3,0x81ea,
            0x81ed,0x81f3,0x826f,0x8272,0x82e5,0x82e6,0x82f1,0x8302,
            0x8336,0x8349,0x83ca,0x83ef,0x843d,0x8449,0x8511,0x852d,
            0x8584,0x85ac,0x85c1,0x884c,0x8868,0x887e,0x888b,0x88c5,
            0x88cf,0x8910,0x897f,0x8981,0x898b,0x898f,0x8997,0x899a,
            0x89aa,0x89b3,0x89e3,0x8a00,0x8a18,0x8a2a,0x8a33,0x8a34,
            0x8a50,0x8a55,0x8a66,0x8a69,0x8a71,0x8a98,0x8a9e,0x8aad,
            0x8ab0,0x8ab2,0x8abf,0x8ac7,0x8ad6,0x8b21,0x8b39,0x8b58,
            0x8b70,0x8b77,0x8c4a,0x8cb7,0x8cde,0x8cea,0x8d70,0x8d77,
            0x8d8a,0x8db3,0x8def,0x8df3,0x8eab,0x8eca,0x8ecd,0x8ee2,
            0x8efd,0x8f03,0x8f09,0x8f1d,0x8f29,0x8f2a,0x8f9b,0x8fb0,
            0x8fba,0x8fbc,0x8fce,0x8fd1,0x8fd4,0x8feb,0x8ff0,0x8ffd,
            0x9000,0x9001,0x9005,0x9006,0x900f,0x9019,0x901a,0x901f,
            0x9020,0x9022,0x9047,0x904b,0x904d,0x904e,0x9053,0x9054,
            0x9055,0x9060,0x9065,0x906d,0x9082,0x90b8,0x90ce,0x90e8,
            0x9177,0x9192,0x91c7,0x91cd,0x91ce,0x91cf,0x91d1,0x92ad,
            0x93e1,0x9451,0x9577,0x958b,0x9593,0x95a2,0x964d,0x9650,
            0x9664,0x967a,0x967d,0x968f,0x9699,0x969b,0x969c,0x96a0,
            0x96a3,0x96d1,0x96e8,0x9707,0x9732,0x9759,0x975e,0x9762,
            0x97f3,0x9803,0x9813,0x982d,0x9838,0x983c,0x984d,0x9854,
            0x9858,0x986b,0x98a8,0x98db,0x98df,0x98ef,0x98f2,0x98fe,
            0x990a,0x9913,0x9996,0x99ac,0x99b3,0x99c4,0x9a12,0x9a13,
            0x9a5a,0x9aa8,0x9aed,0x9b54,0x9b5a,0x9c21,0x9cf4,0x9d09,
            0x9e7f,0x9ec4,0x9ed2,0x9f13,0x9f20,0x9f3b,0x9f3e,0xff1f,
            )
        val GLYPH_IDS = intArrayOf(
            0x0000,0x01d3,0x0472,0x0473,0x0474,0x0477,0x047e,0x047f,
            0x04b3,0x04b5,0x04b7,0x04b9,0x04bb,0x04bc,0x04bd,0x04be,
            0x04bf,0x04c0,0x04c1,0x04c2,0x04c3,0x04c4,0x04c5,0x04c6,
            0x04c7,0x04c8,0x04c9,0x04ca,0x04cb,0x04cc,0x04cd,0x04ce,
            0x04d0,0x04d1,0x04d2,0x04d4,0x04d5,0x04d6,0x04d7,0x04d8,
            0x04d9,0x04da,0x04db,0x04dc,0x04dd,0x04de,0x04df,0x04e0,
            0x04e1,0x04e2,0x04e3,0x04e4,0x04e5,0x04e6,0x04e7,0x04e8,
            0x04e9,0x04ea,0x04eb,0x04ec,0x04ee,0x04ef,0x04f0,0x04f1,
            0x04f2,0x04f3,0x04f4,0x04f5,0x04f7,0x04f8,0x04f9,0x04fa,
            0x04fb,0x04fc,0x04fd,0x04fe,0x0500,0x0503,0x0504,0x0510,
            0x0511,0x0513,0x0519,0x051a,0x0524,0x0527,0x0528,0x052b,
            0x052e,0x0532,0x0536,0x0537,0x0538,0x053a,0x0544,0x0545,
            0x0549,0x054d,0x0552,0x0553,0x0559,0x055a,0x055b,0x055e,
            0x0562,0x0563,0x056a,0x056b,0x0920,0x0927,0x0928,0x0929,
            0x092a,0x092c,0x0934,0x093a,0x093d,0x0943,0x094c,0x094e,
            0x0960,0x096d,0x0978,0x097b,0x097c,0x097f,0x0981,0x098f,
            0x0995,0x099c,0x09a7,0x09ae,0x09af,0x09b1,0x09bb,0x09bd,
            0x09c8,0x09ca,0x09e2,0x09ef,0x09fa,0x0a00,0x0a01,0x0a05,
            0x0a07,0x0a0b,0x0a0e,0x0a31,0x0a40,0x0a48,0x0a53,0x0a7b,
            0x0a8f,0x0a94,0x0a9a,0x0abe,0x0ada,0x0ade,0x0ae8,0x0afe,
            0x0b18,0x0b3d,0x0b50,0x0b61,0x0b6f,0x0b70,0x0b74,0x0b75,
            0x0b89,0x0b8c,0x0b98,0x0ba2,0x0ba3,0x0ba8,0x0bb3,0x0bc9,
            0x0be5,0x0bec,0x0bfd,0x0c06,0x0c07,0x0c14,0x0c16,0x0c17,
            0x0c1b,0x0c1f,0x0c28,0x0c29,0x0c33,0x0c4d,0x0c55,0x0c6a,
            0x0c6d,0x0c73,0x0c8c,0x0c8e,0x0c97,0x0c9e,0x0ca3,0x0ca5,
            0x0cbf,0x0ccd,0x0cea,0x0cf2,0x0cf8,0x0cfe,0x0d31,0x0d47,
            0x0d52,0x0d53,0x0d54,0x0d5b,0x0d5c,0x0d66,0x0d68,0x0d6c,
            0x0d73,0x0d81,0x0d85,0x0d86,0x0d89,0x0d8a,0x0d8e,0x0d95,
            0x0d9a,0x0da3,0x0da4,0x0da5,0x0da9,0x0db1,0x0db8,0x0dc9,
            0x0dcf,0x0dff,0x0e4e,0x0e68,0x0e6c,0x0e6d,0x0e7a,0x0e7c,
            0x0e87,0x0e8e,0x0eb0,0x0ec8,0x0eec,0x0f32,0x0f42,0x0f4a,
            0x0f5a,0x0f73,0x0f86,0x0f93,0x0fa5,0x0fb8,0x0fe3,0x1007,
            0x1009,0x1042,0x1057,0x105a,0x1061,0x107e,0x107f,0x108c,
            0x1097,0x109a,0x109c,0x10a4,0x10a6,0x10a7,0x10ae,0x10bc,
            0x10d3,0x10d7,0x10de,0x10df,0x10e6,0x10f5,0x1112,0x1131,
            0x118e,0x11c0,0x11c7,0x11d1,0x11ea,0x11ee,0x11f8,0x11fb,
            0x11ff,0x1202,0x120e,0x1211,0x1214,0x1217,0x1226,0x122f,
            0x1231,0x1248,0x124d,0x1253,0x1258,0x1259,0x1277,0x127d,
            0x127e,0x1280,0x1282,0x1294,0x12fe,0x1361,0x1367,0x1389,
            0x138c,0x138d,0x1393,0x1399,0x13b6,0x13b7,0x13c5,0x13c8,
            0x13cc,0x13d6,0x13d7,0x13dc,0x13f5,0x1412,0x1418,0x1428,
            0x142a,0x1433,0x1443,0x1445,0x1447,0x144d,0x145b,0x1466,
            0x146c,0x147c,0x1485,0x148b,0x1493,0x149a,0x14a8,0x14a9,
            0x14b0,0x14b2,0x14b8,0x14c0,0x14cc,0x14d5,0x14e3,0x14ee,
            0x14f4,0x14f6,0x150d,0x1525,0x1545,0x154f,0x1552,0x155f,
            0x1570,0x157f,0x1596,0x15a0,0x15a1,0x15a4,0x15cf,0x15d4,
            0x15ff,0x160a,0x161e,0x1646,0x164b,0x1656,0x1669,0x1672,
            0x1679,0x16a3,0x16a6,0x16a8,0x16af,0x16b7,0x16e1,0x16e7,
            0x16eb,0x16fb,0x16fe,0x171b,0x1738,0x173e,0x174c,0x1751,
            0x175f,0x1765,0x176b,0x176c,0x1773,0x1784,0x17d3,0x1851,
            0x1853,0x185d,0x185e,0x1862,0x186b,0x1870,0x1872,0x1885,
            0x1887,0x1888,0x188f,0x189f,0x18ad,0x18b1,0x18c0,0x18ca,
            0x18ce,0x18cf,0x18d5,0x18db,0x18f0,0x18f4,0x191a,0x1923,
            0x1936,0x1937,0x1945,0x1949,0x196f,0x1972,0x197a,0x197f,
            0x1980,0x1982,0x198c,0x198e,0x1996,0x1998,0x1999,0x19ad,
            0x19c2,0x19d4,0x19e8,0x19ea,0x19eb,0x19f2,0x19f9,0x1a05,
            0x1a11,0x1a34,0x1a40,0x1a50,0x1a52,0x1a5d,0x1a63,0x1a9e,
            0x1ab2,0x1abe,0x1b0b,0x1b29,0x1b31,0x1b38,0x1b66,0x1b67,
            0x1b70,0x1ba5,0x1ba6,0x1bb1,0x1bc9,0x1c00,0x1c33,0x1c34,
            0x1c5c,0x1c61,0x1c70,0x1c7d,0x1c97,0x1cab,0x1cac,0x1cae,
            0x1cb0,0x1cb5,0x1cbb,0x1cd2,0x1cde,0x1ce2,0x1cfb,0x1d0a,
            0x1d53,0x1d54,0x1d55,0x1d6f,0x1d89,0x1d8e,0x1da0,0x1db5,
            0x1dbe,0x1de8,0x1e0e,0x1e13,0x1e28,0x1e4f,0x1e52,0x1e5b,
            0x1e76,0x1e9b,0x1eb2,0x1f0e,0x1f43,0x1f66,0x1f6a,0x1f76,
            0x1f82,0x1f8f,0x1fad,0x1fb3,0x1fbb,0x1fce,0x1fdb,0x1ff5,
            0x1ffe,0x2018,0x202f,0x2047,0x2061,0x2080,0x20c0,0x20c8,
            0x20d1,0x20e8,0x20f2,0x2103,0x2105,0x2124,0x212e,0x214b,
            0x2152,0x215d,0x21f6,0x21fa,0x21fe,0x2203,0x220a,0x2212,
            0x222c,0x2230,0x2238,0x2240,0x2254,0x2259,0x2289,0x228c,
            0x22ba,0x22df,0x22eb,0x22f6,0x22f9,0x22fa,0x22ff,0x231e,
            0x233a,0x233d,0x2349,0x234c,0x234d,0x234f,0x2368,0x2369,
            0x2377,0x2379,0x237a,0x237d,0x2390,0x2397,0x23db,0x23e2,
            0x23e6,0x2404,0x2429,0x2465,0x24b0,0x24c3,0x24e6,0x2519,
            0x252d,0x2539,0x2549,0x255d,0x2567,0x2569,0x2578,0x257a,
            0x2595,0x25b7,0x25c5,0x25d6,0x25e0,0x25e7,0x25ea,0x25eb,
            0x25f4,0x260e,0x2636,0x26a3,0x26bd,0x270c,0x271a,0x271f,
            0x2730,0x273d,0x2745,0x2749,0x2759,0x2762,0x27a6,0x27af,
            0x27ca,0x2814,0x2838,0x285f,0x2863,0x2875,0x2886,0x289a,
            0x289d,0x28ba,0x28bc,0x28dc,0x28f1,0x28ff,0x2902,0x290f,
            0x291a,0x291f,0x2929,0x292e,0x2931,0x2934,0x2944,0x2953,
            0x2989,0x299d,0x29ab,0x29b1,0x29b4,0x29d2,0x29d6,0x29e8,
            0x29eb,0x29f0,0x2a49,0x2a4b,0x2a9b,0x2a9c,0x2aa3,0x2aaf,
            0x2ad2,0x2ae0,0x2b25,0x2b39,0x2b60,0x2b65,0x2bdc,0x2bf1,
            0x2c27,0x2c46,0x2c55,0x2de1,0x2df7,0x2e04,0x2e0a,0x2e2c,
            0x2e33,0x2e5b,0x2ea1,0x2ea3,0x2eaa,0x2eac,0x2eb2,0x2eb4,
            0x2ebe,0x2ec3,0x2ed8,0x2ee7,0x2efb,0x2f07,0x2f0d,0x2f0e,
            0x2f21,0x2f26,0x2f33,0x2f35,0x2f3b,0x2f5a,0x2f5d,0x2f6a,
            0x2f6d,0x2f6e,0x2f76,0x2f7b,0x2f89,0x2fc1,0x2fca,0x2fde,
            0x2fec,0x2ff1,0x301d,0x3068,0x3089,0x3091,0x30c1,0x30c6,
            0x30cd,0x30dd,0x3103,0x3107,0x3174,0x3189,0x318c,0x3194,
            0x31a2,0x31a6,0x31aa,0x31b9,0x31c3,0x31c4,0x31f4,0x3205,
            0x320e,0x3210,0x321d,0x321f,0x3222,0x322e,0x3232,0x323c,
            0x323e,0x323f,0x3243,0x3244,0x324a,0x3253,0x3254,0x3258,
            0x3259,0x325b,0x3276,0x3279,0x327b,0x327c,0x3281,0x3282,
            0x3283,0x328b,0x328f,0x3295,0x32a6,0x32c9,0x32d5,0x32e4,
            0x3338,0x334a,0x3371,0x3376,0x3377,0x3378,0x337a,0x3413,
            0x34da,0x3513,0x3534,0x3542,0x3549,0x3553,0x35a7,0x35a9,
            0x35b7,0x35c5,0x35c8,0x35d7,0x35de,0x35e0,0x35e1,0x35e4,
            0x35e5,0x3608,0x3616,0x3629,0x3643,0x365d,0x3661,0x3664,
            0x36c4,0x36cf,0x36dd,0x36ee,0x36f7,0x36fa,0x3703,0x3709,
            0x370d,0x3718,0x3720,0x373a,0x373d,0x374a,0x374d,0x3753,
            0x375a,0x375f,0x379a,0x37a6,0x37ac,0x37b6,0x37ea,0x37eb,
            0x3814,0x381f,0x3854,0x389f,0x38a4,0x3929,0x3976,0x397f,
            0x3a26,0x3a55,0x3a5f,0x3a8a,0x3a93,0x3aa1,0x3aa4,0x3bc6,
        )
    }
    @Test
    fun cmapCoverageTest() {
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        val font = Font.Builder(context.assets, "NotoSansJP-Regular.ttf").build()
        val opentype = OpenTypeUtils.parse(font.buffer, 0)

        val mismatchList = mutableListOf<Pair<Int, Int>>()
        CODE_POINTS.zip(GLYPH_IDS).forEach { (cp, gid) ->
            val actualGid =opentype.charMap.getGlyphId(cp)
            if (actualGid != gid) {
                mismatchList.add(Pair(cp, gid))
            }
        }
        if (mismatchList.isNotEmpty()) {
            val text = mismatchList.map { (cp, gid) ->
                String.format("U+%04x: expected 0x%04x, actual 0x%04x", cp, gid, opentype.charMap.getGlyphId(cp))
            }.joinToString("\n")
            Log.e("Debug", text)
            if (mismatchList.size > 10) {
                fail("Too many mismatches. See logcat for details.")
            } else {
                fail(text)
            }
        }

    }
}